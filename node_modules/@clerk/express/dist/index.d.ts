import { ClerkClient as ClerkClient$1, createClerkClient } from '@clerk/backend';
export * from '@clerk/backend';
import { AuthObject, AuthenticateRequestOptions } from '@clerk/backend/internal';
import { Request, RequestHandler } from 'express';

declare const clerkClient: ClerkClient$1;

type ExpressRequestWithAuth = Request & {
    auth: AuthObject;
};
type ClerkMiddlewareOptions = AuthenticateRequestOptions & {
    debug?: boolean;
    clerkClient?: ClerkClient;
};
/**
 * Middleware for Express that handles authentication and authorization with Clerk.
 * For more details, please refer to the docs: https://clerk.com/docs/references/express/overview?utm_source=github&utm_medium=expres
 */
interface ClerkMiddleware {
    /**
     * @example
     * const handler = (request, response, next) => {
     *   ...;
     *   // if next is not called the request will be terminated or hung.
     *   return next();
     * }
     * app.use(clerkMiddleware(handler, options));
     */
    (handler: RequestHandler, options?: ClerkMiddlewareOptions): RequestHandler[];
    /**
     * @example
     * app.use(clerkMiddleware(options));
     *
     * @example
     * const clerkClient = createClerkClient({ ... });
     * app.use(clerkMiddleware({ clerkClient }));
     *
     * @example
     * app.use(clerkMiddleware());
     */
    (options?: ClerkMiddlewareOptions): RequestHandler[];
}
type ClerkClient = ReturnType<typeof createClerkClient>;

declare const clerkMiddleware: ClerkMiddleware;

/**
 * Retrieves the Clerk AuthObject using the current request object.
 *
 * @param {ExpressRequest} req - The current request object.
 * @returns {AuthObject} Object with information about the request state and claims.
 * @throws {Error} `clerkMiddleware` is required to be set in the middleware chain before this util is used.
 */
declare const getAuth: (req: Request) => AuthObject;

/**
 * Middleware to require auth requests for user authenticated or authorized requests.
 * An HTTP 401 status code is returned for unauthenticated requests.
 *
 * @example
 * router.get('/path', requireAuth, getHandler)
 * //or
 * router.use(requireAuth)
 * @example
 * hasPermission = (request, response, next) => {
 *    const auth = getAuth(request);
 *    if (!auth.has({ permission: 'permission' })) {
 *      response.status(403).send('Forbidden');
 *      return;
 *    }
 *    return next();
 * }
 * router.get('/path', requireAuth, hasPermission, getHandler)
 *
 * @throws {Error} `clerkMiddleware` is required to be set in the middleware chain before this util is used.
 */
declare const requireAuth: RequestHandler;

export { type ClerkMiddleware, type ExpressRequestWithAuth, clerkClient, clerkMiddleware, getAuth, requireAuth };
