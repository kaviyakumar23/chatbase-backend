generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  clerkUserId   String          @unique @map("clerk_user_id") @db.VarChar(255)
  email         String          @unique @db.VarChar(255)
  fullName      String?         @map("full_name") @db.VarChar(255)
  planType      String?         @default("free") @map("plan_type") @db.VarChar(50)
  chatbot_limit Int?            @default(1)
  messageLimit  Int?            @default(1000) @map("message_limit")
  createdAt     DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  chatbots      chatbots[]
  usageTracking UsageTracking[]

  @@map("users")
}

model DataSource {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  chatbot_id    String    @db.Uuid
  type          String    @db.VarChar(50)
  name          String    @db.VarChar(255)
  sourceConfig  Json      @map("source_config")
  status        String?   @default("pending") @db.VarChar(50)
  errorMessage  String?   @map("error_message")
  fileSizeBytes BigInt?   @map("file_size_bytes")
  charCount     Int?      @map("char_count")
  chunkCount    Int?      @map("chunk_count")
  r2Key         String?   @map("r2_key") @db.VarChar(500)
  processedAt   DateTime? @map("processed_at") @db.Timestamptz(6)
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  chatbots      chatbots  @relation(fields: [chatbot_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([chatbot_id], map: "idx_data_sources_chatbot")
  @@index([status], map: "idx_data_sources_status")
  @@map("data_sources")
}

model Conversation {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  chatbot_id    String         @db.Uuid
  sessionId     String         @map("session_id") @db.VarChar(255)
  userEmail     String?        @map("user_email") @db.VarChar(255)
  userName      String?        @map("user_name") @db.VarChar(255)
  ipAddress     String?        @map("ip_address") @db.Inet
  userAgent     String?        @map("user_agent")
  referrer      String?
  startedAt     DateTime?      @default(now()) @map("started_at") @db.Timestamptz(6)
  endedAt       DateTime?      @map("ended_at") @db.Timestamptz(6)
  messageCount  Int?           @default(0) @map("message_count")
  feedbackScore Int?           @map("feedback_score")
  feedbackText  String?        @map("feedback_text")
  createdAt     DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  capturedLeads CapturedLead[]
  chatbots      chatbots       @relation(fields: [chatbot_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages      Message[]

  @@index([chatbot_id], map: "idx_conversations_chatbot")
  @@index([sessionId], map: "idx_conversations_session")
  @@map("conversations")
}

model Message {
  id             String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  conversationId String       @map("conversation_id") @db.Uuid
  role           String       @db.VarChar(20)
  content        String
  tokensUsed     Int?         @map("tokens_used")
  contextUsed    Json?        @map("context_used")
  createdAt      DateTime?    @default(now()) @map("created_at") @db.Timestamptz(6)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([conversationId], map: "idx_messages_conversation")
  @@index([createdAt], map: "idx_messages_created")
  @@map("messages")
}

model UsageTracking {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId           String    @map("user_id") @db.Uuid
  month            DateTime  @db.Date
  totalMessages    Int?      @default(0) @map("total_messages")
  totalTokens      Int?      @default(0) @map("total_tokens")
  totalDataSources Int?      @default(0) @map("total_data_sources")
  storageBytesUsed BigInt?   @default(0) @map("storage_bytes_used")
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, month])
  @@index([userId, month], map: "idx_usage_tracking_user_month")
  @@map("usage_tracking")
}

model CapturedLead {
  id             String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  chatbot_id     String        @db.Uuid
  conversationId String?       @map("conversation_id") @db.Uuid
  email          String?       @db.VarChar(255)
  name           String?       @db.VarChar(255)
  phone          String?       @db.VarChar(50)
  company        String?       @db.VarChar(255)
  custom_fields  Json?         @default("{}")
  capturedAt     DateTime?     @default(now()) @map("captured_at") @db.Timestamptz(6)
  exported       Boolean?      @default(false)
  chatbots       chatbots      @relation(fields: [chatbot_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onUpdate: NoAction)

  @@index([chatbot_id], map: "idx_captured_leads_chatbot")
  @@map("captured_leads")
}

model chatbot_analytics {
  id                                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  chatbot_id                        String    @db.Uuid
  date                              DateTime  @db.Date
  total_conversations               Int?      @default(0)
  total_messages                    Int?      @default(0)
  unique_users                      Int?      @default(0)
  avg_messages_per_conversation     Decimal?  @db.Decimal(10, 2)
  avg_conversation_duration_seconds Int?
  positive_feedback_count           Int?      @default(0)
  negative_feedback_count           Int?      @default(0)
  created_at                        DateTime? @default(now()) @db.Timestamptz(6)
  chatbots                          chatbots  @relation(fields: [chatbot_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([chatbot_id, date])
  @@index([chatbot_id, date], map: "idx_chatbot_analytics_chatbot_date")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model chatbots {
  id                  String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id             String              @db.Uuid
  name                String              @db.VarChar(255)
  slug                String              @db.VarChar(255)
  description         String?
  model               String?             @default("gpt-3.5-turbo") @db.VarChar(100)
  temperature         Decimal?            @default(0.7) @db.Decimal(2, 1)
  max_tokens          Int?                @default(500)
  system_prompt       String?
  welcome_message     String?             @default("Hello! How can I help you today?")
  suggested_questions Json?               @default("[]")
  theme_color         String?             @default("#000000") @db.VarChar(7)
  bot_avatar_url      String?
  chat_bubble_style   Json?               @default("{}")
  public_id           String              @unique @db.VarChar(255)
  api_key             String?             @unique @db.VarChar(255)
  is_active           Boolean?            @default(true)
  allowed_domains     String[]
  vector_namespace    String              @unique @db.VarChar(255)
  message_count       Int?                @default(0)
  last_message_at     DateTime?           @db.Timestamptz(6)
  created_at          DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?           @default(now()) @db.Timestamptz(6)
  captured_leads      CapturedLead[]
  chatbot_analytics   chatbot_analytics[]
  users               User                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  conversations       Conversation[]
  data_sources        DataSource[]

  @@unique([user_id, slug])
  @@index([public_id], map: "idx_chatbots_public_id")
  @@index([user_id], map: "idx_chatbots_user")
}
